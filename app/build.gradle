plugins {
    id 'com.android.application'
}

import java.nio.file.Paths

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.remotejsi"
        minSdk 30 /* Binder native headers not available below */
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags '-std=c++17'
                arguments "-Dproject_dir=${projectDir.absolutePath.replace("\\","/")}"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.10.2'
        }
    }
    buildFeatures {
        viewBinding true
    }
}

def findNodeModulePath(baseDir, packageName) {
    def basePath = baseDir.toPath().normalize()
    // Node's module resolution algorithm searches up to the root directory,
    // after which the base path will be null
    while (basePath) {
        def candidatePath = Paths.get(basePath.toString(), "node_modules", packageName)
        if (candidatePath.toFile().exists()) {
            return candidatePath.toString()
        }
        basePath = basePath.getParent()
    }
    return null
}

task prepareHermes(dependsOn: [], type: Copy) {
    def hermesPackagePath = findNodeModulePath(projectDir, "hermes-engine")
    if (!hermesPackagePath) {
        throw new GradleScriptException("Could not find the hermes-engine npm package", null)
    }

    def hermesAAR = file("$hermesPackagePath/android/hermes-debug.aar")
    if (!hermesAAR.exists()) {
        throw new GradleScriptException("The hermes-engine npm package is missing \"android/hermes-debug.aar\"", null)
    }

    def soFiles = zipTree(hermesAAR).matching({ it.include "**/*.so" })

    from soFiles
//    from "src/main/jni/first-party/hermes/Android.mk"
    into "$buildDir/hermes"
}

task compileAidlNdk() {
    doLast {
        def aidlCpp = [android.sdkDirectory,
                       'build-tools',
                       android.buildToolsVersion,
                       'aidl'].join(File.separator)

        def outDir = [projectDir.absolutePath,
                      'src', 'main', 'cpp', 'aidl'].join(File.separator)

        def headerOutDir = [projectDir.absolutePath,
                            'src', 'main', 'cpp', 'includes'].join(File.separator)

        def searchPathForImports = [projectDir.absolutePath,
                                    'src', 'main', 'aidl'].join(File.separator)

        def aidlFiles = ['IJSIInterface.aidl', 'IRemoteJSIInterface.aidl',
                         'IManagerInterface.aidl', 'IJSIBufferInterface.aidl',
                         'IJSIValueInterface.aidl', 'IJSIStringInterface.aidl', 'IJSIObjectInterface.aidl',
                         'IJSISymbolInterface.aidl']

        for (file in aidlFiles) {
            exec {
                executable(aidlCpp)
                args('--lang=ndk',
                        '-o', outDir,
                        '-h', headerOutDir,
                        '-I', searchPathForImports,
                        [projectDir.absolutePath,
                        'src', 'main', 'aidl',
                        'com', 'example', 'remotejsi', file].join(File.separator))
            }
        }
    }
}

afterEvaluate {
    preBuild.dependsOn(compileAidlNdk, prepareHermes)
}


dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    def hermesPath = '../node_modules/hermes-engine/android/'
    implementation files(hermesPath + "hermes-debug.aar")
    implementation files(hermesPath + "hermes-cppruntime-debug.aar")

}